1. OS 최적화(Kali, Ubuntu, ...etc)
	- 각 os 별 설정파일을 작성한다.
	- 스크립트 실행 시 시스템의 os를 식별한다.
	- os에 맞는 설정을 불러와서 점검 함수를 실행한다.
	- os 상관 없이 스크립트 실행에 필요한 공통 사항은 설정 파일(.conf)로 관리

2. Refactoring
	2-1. 시스템 최적화
		- 반복되는 로직을 함수로 만들어 최적화 진행
		- 반복 사용되는 변수를 전역 변수로 만들어 최적화 진행
		- ignore 리스트를 만들어 탐색 시간을 줄인다.

	2-2. 출력 형태 통일
		- 모든 점검 사항에 적용할 수 있는 정형화된 출력형태를 고안한다.
			아이디어 1) 트리 형식
				U_01 점검 사항 (양호 or 취약)
					├─ 관련 점검 사항 (1)
					└─ 관련 점검 사항 (2)
3. DB 적제 방안 고안
	- DB 적제를 위한 데이터 정규화
	- C 또는 python을 활용한 자동화 진행

4. 웹 서비스 확장
	- 적제된 데이터를 웹 페이지에 출력
	- 취약점 점검 자동화
	- 점검 통계 자료 출력
	- 통계 자료 도식화